ls
ls()
ls(
)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
library("ISLR")
library("ISLR")
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R', echo=TRUE)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R', echo=TRUE)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R', echo=TRUE)
mpg
AUto
library(ISLR)
AUto
Auto
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R', echo=TRUE)
summary(Auto)
names(Auto)
Auto$name
names(Auto)
d = Auto
d$name = NULL
names(d)
d
?cbind
Auto$weight
Auto$mpg
cbind(Auto$weight, Auto$mpg)
names(cbind(Auto$weight, Auto$mpg))
dim(cbind(Auto$weight, Auto$mpg))
attach(Auto)
cor(mpg, weight)
cor(weight, mpg)
plot(weight, mpg)
lm(weight ~ mpg)
plot(lm(weight ~ mpg))
plot(lm(weight ~ mpg))
lm(mpg ~ weigth)
lm(mpg ~ weights)
lm(mpg ~ weight)
plot(mpg ~ weigth)
plot(mpg ~ weight)
abline(lm(mpg ~ weight))
m  = lm(mpg ~ weight)
AUto
Auto
names(Auto)
train = Auto
train$name = NULL
train$mpg = NULL
names(train)
restart
exit
quit
quit
quit()
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R', echo=TRUE)
Auto
lm(mpg ~ weights)
exmaples
examples
examples
dat$name = NULL
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R', echo=TRUE)
lm(mpg~ weight, data)
?lm
lm(mpg~ ., data)
data
names(data)
summary(data)
boxplot(summary(data))
boxplot(data)
summary(data$origin)
boxplot(table(data$origin))
barplot(table(data$origin))
lm1 = lm(mpg~ weight, data)
lm1
lm = lm(mpg~ ., data)
lm
lm = lm(mpg~ ., data)
lm(mpg~ ., data)
lm(mpg~ ., data)
lm(mpg~ origin, data)
abline(lm(mpg~ origin, data))
plot(mpg~ origin, data)
abline(lm(mpg~ origin, data))
lm1 = lm(mpg~ ., data)
lm1
lm(mpg~ origin, data, rm.na=TRUE)
plot(horsepower~ cylinders, data)
abline(lm(horsepower~ cylinders, data))
lm
max(Auto$horsepower)
Auto[Auto$horsepower==230,
]
print(lm1)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R', echo=TRUE)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
summary(data)
data$year += 1900
data$year
data$year + 1900
data$year = data$year + 1900
lm1 = lm(mpg~ ., data)
lm1
as.vector(lm1)
v as.vector(lm1)
v =  as.vector(lm1)
v
v[1]
v[2]
v[3]
v[4]
v[5]
v[6]
v[7]
v[8]
v[9]
v[10]
levels(v)
lm1
lm1$coefficients
as.factor(lm1$coefficients)
lm1$coefficients
lm1$coefficients + 10
lm(mpg~ displacement, data)
cor(data$displacement, dat$weight)
cor(data$displacement, data$weight)
summary(data)
var(data$weight)
std(data$weight)
sd(data$weight)
sd(data$horsepower)
data$acceleration
min(data$acceleration)
for d in 1:5 {}
set.seed(1)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
?abline
lm(mpg ~ poly(acceleration,degree), data)
lm(mpg ~ poly(acceleration,1), data)
lm(mpg ~ poly(acceleration,0]), data)
lm(mpg ~ poly(acceleration,0), data)
lm(mpg ~ poly(acceleration,2), data)
predict(lm(mpg ~ poly(acceleration,2), data))
plot(predict(lm(mpg ~ poly(acceleration,2), data)))
plot(fitted(model.extract()))
model = lm(mpg ~ poly(acceleration,2), data)
plot(fitted(model.extract()))
plot(fitted(model))
plot(fitted(model))
plot(fitted(model), residuals(model))
predict(model, seq(0, 30, 0.1))
seq(0, 3, 0.1)
predict(model, seq(0, 30, 0.1), level=0.99)
?predict
summary(model)
model(1)
predict(model)
points(Auto$mpg, predict(model))
points(Auto$mpg, predict(model), type="l")
points(sort(Auto$mpg), predict(model), type="l")
plot()
plot(c(1,1))
points(sort(Auto$mpg), predict(model), type="l")
points(sort(Auto$mpg), predict(model), type="l")
points(sort(Auto$mpg), predict(model), type="l")
fit = lm(mpg ~ poly(acceleration,), data)
fit = lm(mpg ~ poly(acceleration,2), data)
fit
plot(mpg~acceleration, data)
points(hp, fitted(fit), color="red")
points(data$acceleration, fitted(fit), color="red")
points(data$acceleration, fitted(fit), color="red", pch=20)
points(data$acceleration, fitted(fit), col="red", pch=20)
points(data$acceleration, fitted(fit), col="red", pch=20)
points(seq(5, 30, 0.1), fitted(fit), col="red", pch=20)
points(seq(5, 30, 0.01), fitted(fit), col="red", pch=20)
predict(fit, seq(1, 10))
predict(seq(1, 10), fit)
predict(fit, newdata= seq(1, 10))
fr = data.frame(acceleration=seq(0, 30, 0.1))
fr
predict(fit, fr)
?with
predict(fit, fr)
fr
fr = data.frame(acc = seq(0, 30, 0.1))
fr
fr = data.frame(acc = seq(0, 30, 0.1))
fr$pred = predict(fit, fr)
fr = data.frame(acceleration = seq(0, 30, 0.1))
fr$pred = predict(fit, fr)
predict(fit, fr)
fr = data.frame(acceleration = seq(0, 30, 0.1))
fr$pred = predict(fit, fr)
fr
plot(fr)
lines(fr)
plot(mpg ~ acceleration, data)
lines(fr)
lines(fr)
lines(fr)
lines(fr, col="red")
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
legend(1, 95, legend=c("Degree 1", "Degree 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8,
title="Line types", text.font=4, bg='lightblue')
plot(1,1)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8,
title="Line types", text.font=4, bg='lightblue')
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8,
title="Line types", text.font=4, bg='lightblue')
legend(4.1, 30, ex12, col = 2:3, lty=2:3, lwd=2)
legend(4.1, 30, ex12, col = 2:3, lty=2:3, lwd=2)legend(-1, 1.9, c("sin", "cos", "tan"), col = c(3,4,6),
lty = c(2, -1, 1), pch = c(-1, 3, 4), merge = TRUE, bg='gray90')
legend(-1, 1.9, c("sin", "cos", "tan"), col = c(3,4,6),
lty = c(2, -1, 1), pch = c(-1, 3, 4), merge = TRUE, bg='gray90')
plot(mpg ~ acceleration, data)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
legend(-1, 1.9, c("sin", "cos", "tan"), col = c(3,4,6),
lty = c(2, -1, 1), pch = c(-1, 3, 4), merge = TRUE, bg='gray90')
legend(30, 30, "dsaf")
legend(
y=0.92, legend=c("quantile","90st", "91st",
"(90st+91st)/2"), col=c("blue", "yellow", "green", "red"),   pch=c(".",".", ".", ".")
)
legend(
y=0.92, legend=c("quantile","90st", "91st",
"(90st+91st)/2"), col=c("blue", "yellow", "green", "red"),   pch=c(".",".", ".", ".")
)
plot(1:N, vRm, pch=".", col="blue", xlab="m", ylim=c(0.885, 0.91))
ylab="approximated 90th percentile")
lines(1:N, v1m, pch=".", col="yellow")
lines(1:N, v2m, pch=".", col="green")
lines(1:N, v3m, pch=".", col="red")
legend(
y=0.92, legend=c("quantile","90st", "91st",
"(90st+91st)/2"), col=c("blue", "yellow", "green", "red"),   pch=c(".",".", ".", ".")
)
plot(1:N, vRm, pch=".", col="blue", xlab="m", ylim=c(0.885, 0.91))
ylab="approximated 90th percentile")
lines(1:N, v1m, pch=".", col="yellow")
lines(1:N, v2m, pch=".", col="green")
lines(1:N, v3m, pch=".", col="red")
legend(
y=0.92, legend=c("quantile","90st", "91st",
"(90st+91st)/2"), col=c("blue", "yellow", "green", "red"),   pch=c(".",".", ".", ".")
)
plot(1:N, vRm, pch=".", col="blue", xlab="m", ylim=c(0.885, 0.91))
ylab="approximated 90th percentile")
lines(1:N, v1m, pch=".", col="yellow")
lines(1:N, v2m, pch=".", col="green")
lines(1:N, v3m, pch=".", col="red")
legend(
y=0.92, legend=c("quantile","90st", "91st",
"(90st+91st)/2"), col=c("blue", "yellow", "green", "red"),   pch=c(".",".", ".", ".")
)
plot(1:N, vRm, pch=".", col="blue", xlab="m", ylim=c(0.885, 0.91))
ylab="approximated 90th percentile")
lines(1:N, v1m, pch=".", col="yellow")
lines(1:N, v2m, pch=".", col="green")
lines(1:N, v3m, pch=".", col="red")
legend(
y=0.92, legend=c("quantile","90st", "91st",
"(90st+91st)/2"), col=c("blue", "yellow", "green", "red"),   pch=c(".",".", ".", ".")
)
plot(1:N, vRm, pch=".", col="blue", xlab="m", ylim=c(0.885, 0.91))
ylab="approximated 90th percentile")
lines(1:N, v1m, pch=".", col="yellow")
lines(1:N, v2m, pch=".", col="green")
lines(1:N, v3m, pch=".", col="red")
plot(1:N, vRm, pch=".", col="blue", xlab="m", ylim=c(0.885, 0.91))
plot(1:N, vRm, pch=".", col="blue", xlab="m", ylim=c(0.885, 0.91))
legend( x= "topright", y=0.92,
legend=c("quantile","90st", "91st", "(90st+91st)/2"),
col=c("blue", "yellow", "green", "red"),
pch=c(".",".", ".", "."))
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
legend("topleft",
legend = c(1:5),
col = colors,
lty = 1,
lwd = 2,
)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
c("a", "dfa") + c(1,2)
cat(3, "ahoj")
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
?lines
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
fit = lm(mpg ~ poly(acceleration,2), data)
fit$df.residual
fit$residuals
fit = lm(mpg ~ poly(acceleration,2), data)
summary(fit)
s = summary(fit)
s
s$r.squared
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
d = Auto
d$mpg
mean(d$mpg)
mpg.mean = mean(d$mpg)
d$mpg > mpg.mean
d$mpg > mpg.mean
as.numeric(d$mpg > mpg.mean)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
d$mpg01
d
head(d)
head(d)
head(d)
head(d, 2)
head(d, 20)
-sum(freqs * log2(freqs))
c(1,1,1,1,1,3,3,3,2,2,3)
table(c(1,1,1,1,1,3,3,3,2,2,3))
v = c(1,1,1,1,1,3,3,3,2,2,3)
table(v) / NROW(v)
sum(table(v) / NROW(v))
dist = table(v) / NROW(v)
dist * log2(dist)
-sum(dist * log2(dist))
entropy = function(vector) {
dist = table(vector) / NROW(vector)
return -sum(dist * log2(dist))
}
entropy(d$mpg01)
d$mpg01
entropy = function(vector) {
dist = table(vector) / NROW(vector)
return (-sum(dist * log2(dist)))
}
entropy(d$mpg01)
table(d$mpg01)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
table(d$mpg01)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
d
head(d)
d[1:5, ]
d[1:10, ]
sample(1:10)
sample(1:3)
sample(1:3)
sample(1:3)
d[sample(1:NROW(d)), ]
ds = d[sample(1:NROW(d)), ]
NROW(ds)
NROW(d)
0.8 * 392
int(0.8 * 392)
round(0.8 * 392)
train_size = round(NROW(d) * 0.8)
# lets shuffle the data, to make the distribution equal across all parts of dataset
d = d[sample(1:NROW(d)), ]
head(d)
head(d, 10)
# lets shuffle the data, to make the distribution equal across all parts of dataset
d = d[sample(1:NROW(d)), ]
head(d0)
head(d)
train = d[1:train_size, ]
test = d[(train_size+1):NROW(d), ]
NROW(train)
NROW(test)
314 + 78
heads(train)
head(train)
head(test)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
test
test$mpg01
NROW(test$mpg01)
table(test$mpg01)
table(test$mpg01)/NROW(test$mpg01)
table(train$mpg01)/NROW(train$mpg01)
max(table(train$mpg01)/NROW(train$mpg01) )
sort(table(train$mpg01),decreasing=TRUE)[1:3]
table(train$mpg01)
sort(table(train$mpg01),decreasing=TRUE)[1]
as.numeric(sort(table(train$mpg01),decreasing=TRUE)[1])
x = as.numeric(sort(table(train$mpg01),decreasing=TRUE)[1])
x
x*2
x*2 + 324
# get the most frequent value in train dataset
most_frequent = as.numeric(sort(table(train$mpg01),decreasing=TRUE)[1])
most_frequent
# get the most frequent value in train dataset
most_frequent = as.numeric(names(sort(table(train$mpg01),decreasing=TRUE))[1])
most_frequent
names(sort(table(train$mpg01),decreasing=TRUE))[1]
sort(table(train$mpg01),decreasing=TRUE))[1]
sort(table(train$mpg01),decreasing=TRUE))
sort(table(train$mpg01),decreasing=TRUE)
names(sort(table(train$mpg01),decreasing=TRUE))
test$mpg01 == most_frequent
sum(test$mpg01 == most_frequent)
sum(test$mpg01 == most_frequent) / NROW(test)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
train
head(train)
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
train
head(train)
?glm
library(Amelia)
install.packages("Amelia")
library(Amelia)
missmap(Auto)
binomial()
binomial(link="logit")
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
glm.model
?predict
predict(
glm.model,
type = 'response',
newdata = train
)
predict(
glm.model,
type = 'response',
newdata = train
)
plot(predict(
glm.model,
type = 'response',
newdata = train
))
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
plot(predict(
glm.model,
type = 'response',
newdata = train
))
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
plot(predict(
glm.model,
type = 'response',
newdata = train
))
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
glm.model = glm(mpg01 ~ ., data=train, family= 'binomial')
glm.model
train
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
source('C:/Users/Jakub/school/intro-into-machine-learning/hw2/hw2.R')
summary(glm.model)
s = summary(glm.model)
s$coefficients
s$coefficients*10
head(train)
glm.model = glm(mpg01 ~ ., data=test, family= 'binomial')
print(glm.model)
