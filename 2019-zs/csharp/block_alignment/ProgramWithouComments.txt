using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace block_alignment
{

    class Aligner
    {
        private readonly StreamReader _inputFile;
        private readonly StreamWriter _outputFile;
        private readonly int _maxLen;

        private new List<string> _line;
        private int _lineLength;

        private char _c;
        private StringBuilder _currentWord;
        private bool _blankLine;


        public Aligner(string inputFile, string outputFile, int maxLen)
        {
            this._inputFile = new StreamReader(inputFile);
            this._outputFile = new StreamWriter(outputFile);
            this._maxLen = maxLen;
        }

        private void print_line(bool lastParagraphLine)
        {
            if (_line.Count == 0)
            {
                return;
            }
            else if (_line.Count == 1)
            {
                _outputFile.WriteLine(_line[0]);
            }
            else
            {
                {
                    for (int j = 0; j < _line.Count; j++)
                    {
                        if (j == _line.Count - 1)
                        {
                            _outputFile.WriteLine(_line[j]);
                        }
                        else
                        {
                            _outputFile.Write(_line[j] + " ");    
                        }
                    }
                }
                else
                {
                    int wordsLen = 0;
                    foreach (var word in _line)
                    {
                        wordsLen += word.Length;
                    }

                    int spareSpaces = _maxLen - wordsLen;
                    int spaceBetweenWords = spareSpaces / (_line.Count - 1) + 1 ;
                    for (int i = 0; i < _line.Count - 1; i++)
                    {
                        _outputFile.Write(_line[i]);
                        
                        int wordSpacesRemaining = _line.Count - 1 - i;
                        if ((spaceBetweenWords-1) * wordSpacesRemaining == spareSpaces)
                        {
                            spaceBetweenWords -= 1;
                        }

                        for (int j = 0; j < spaceBetweenWords; j++)
                        {
                            _outputFile.Write(' ');
                        }

                        spareSpaces -= spaceBetweenWords;

                    } 
                    
                    _outputFile.Write(_line[_line.Count - 1]);
                    _outputFile.Write('\n');
                }
            }

        }

        public void Process()
        {
            _line = new List<string>();
            _currentWord = new StringBuilder();
            _blankLine = true;

            while (!addedSpaceAtTheEnd)
            {
                if (_inputFile.EndOfStream)
                {
                    _c = ' ';
                    addedSpaceAtTheEnd = true;
                } else
                {
                    _c = (char) _inputFile.Read();
                }

                if (_c == ' ' || _c == '\t' || _c == '\n')
                {
                    {
                        if (_lineLength + _currentWord.Length > _maxLen)   
                        {
                            
                            if (separateParagraphs)
                            {
                                _outputFile.Write('\n');
                                separateParagraphs = false;
                            }
                            
                            _line.Clear();
                            _lineLength = 0;
                        }
                        _line.Add(_currentWord.ToString());
                        _lineLength += _currentWord.Length + 1;
                        _currentWord.Clear();

                    {
                        if (separateParagraphs)
                        {
                            _outputFile.Write('\n');
                        }
                        
                        _line.Clear();
                        _lineLength = 0;
                        separateParagraphs = true;  
                        
                        while (_c == ' ' || _c == '\t' || _c == '\n')
                        {
                            if (_inputFile.EndOfStream)
                            {
                                _outputFile.Close();
                                return;
                            }
                            _c = (char) _inputFile.Read();
                        }
                        
                        _currentWord.Append(_c);
                        _blankLine = false;
                    }

                    if (_c == '\n')
                    {
                        _blankLine = true;
                    }
                }
                else
                {
                    _blankLine = false;
                    _currentWord.Append(_c);
                }
            }

            if (_line.Count > 0)
            {
                if (separateParagraphs)
                {
                    _outputFile.Write('\n');
                }
                print_line(true);
            }
            _inputFile.Close();
            _outputFile.Close();
        }
    }


    static class Program
    {
        static bool args_are_valid(string[] args, out int lineLength)
        {
            lineLength = -1;
            if (args.Length != 3) return false;
            return int.TryParse(args[2], out lineLength);
        }
        
        static void Main(string[] args)
        {
            if (!args_are_valid(args, out int lineLength))
            {
                Console.WriteLine("Argument Error");
            }

            try
            {
                Aligner aligner = new Aligner(args[0], args[1], lineLength);
                aligner.Process();

            } catch (IOException) {
                Console.WriteLine("File Error");
            }
        }
    }
}
